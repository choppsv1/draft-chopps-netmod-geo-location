# -*- fill-column: 69; org-confirm-babel-evaluate: nil -*-
#+STARTUP: align entitiespretty hidestars inlineimages latexpreview noindent showall
#+OPTIONS: prop:nil title:t toc:t \n:nil ::t |:t ^:{} -:t *:t ':nil

#+TITLE: YANG Geo Location
#+AUTHOR: Christian Hopps
#+EMAIL: chopps@chopps.org
#+AFFILIATION: LabN Consulting, L.L.C.
#+RFC_NAME: draft-chopps-netmod-geo-location
#+RFC_VERSION: 00
#+RFC_XML_VERSION: 3

#+begin_abstract
This document defines a generic geographical location object YANG
grouping. The geographical location grouping is intended to be used
in YANG models for specifying a location on or in reference to the
Earth or any other astronomical object.
#+end_abstract

* Introduction

In many applications we would like to specify the location of
something geographically. Some examples of locations in networking
might be the location of data center, a rack in an internet exchange
point, a router, a firewall, a port on some device, or it could be
the endpoints of a fiber, or perhaps the failure point along a fiber.

Additionally, while this location is typically relative to The Earth,
it does not need to be. Indeed it is easy to imagine a network or
device located on The Moon, on Mars, on Enceladus (the moon of
Saturn) or even a comet (e.g., 67p/churyumov-gerasimenko).

Finally, one can imagine defining locations using a different frames
of reference or even alternate systems (e.g., a simulations or
virtual realities).

This document defines a ~geo-location~ YANG grouping that allows for
all of the above data to be captured.

This specification conforms to [[ISO.6709.2008]].

The YANG data model described in this document conforms to the
Network Management Datastore Architecture defined in [[RFC8342]].

#+BEGIN_COMMENT
,** Considered
XXX cannot find this anywhere!
OGC 00-014r1, Guidelines for Successful OGC Interface Specifications.
#+END_COMMENT

** Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [[RFC2119]] [[RFC8174]] when, and only when, they appear in all capitals,
   as shown here.

* The Geo Location Object
*** Frame of Reference

    The frame of reference (~reference-frame~) defines what the
    location values refer to and their meaning. The referred to
    object can be any astronomical body. It could be a planet such as
    The Earth or Mars, a moon such as Enceladus, an asteroid such as
    Ceres, or even a comet such as 1P/Halley. This value is specified
    in ~astronomical-body~ and is defined by the International
    Astronomical Union ([[http://www.iau.org]]), The default
    ~astronomical-body~ value is =earth=.

    In addition to identifying the astronomical body we also need to
    define the meaning of the coordinates (e.g., latitude and
    longitude) and the definition of 0-height. This is done with a
    ~geodetic-datum~ value. The default value for ~geodetic-datum~ is
    =wgs-84= (i.e., the World Geodetic System, [[WGS84]]), which is used
    by the Global Positioning System (GPS) among many others. We
    define an IANA registry for specifying standard values for the
    ~geodetic-datum~.

    In addition to the ~geodetic-datum~ value we allow refining the
    coordinate and height accuracy using ~coord-accuracy~ and
    ~height-accuracy~ respectively. When specified these values
    override the defaults implied by the ~geodetic-datum~ value.

    Finally, we define an optional feature which allows for changing
    the system for which the above values are defined. This optional
    feature adds an ~alternate-system~ value to the reference frame.
    This value is normally not present which implies the natural
    universe is the system. The use of this value is intended to
    allow for creating virtual realities or perhaps alternate
    coordinate systems. The definition of alternate systems is
    outside the scope of this document.

*** Location

    This is the location on or relative to the astronomical object.
    It is specified using 2 or 3 coordinates values. These values are
    given either as ~latitude~, ~longitude~, and an optional
    ~height~, or as Cartesian coordinates of ~x~, ~y~ and an optional
    ~z~. For the standard location choice ~latitude~ and ~longitude~
    are specified as fractions of decimal degrees, and the ~height~
    value is in fractions of meters. For the Cartesian choice ~x~,
    ~y~ and ~z~ are in fractions of meters. In both choices the exact
    meanings of all of the values are defined by the ~geodetic-datum~
    value in the [[Frame of Reference]].

*** Motion

    Support is added for objects in relatively stable motion. For
    objects in relatively stable motion there are an additional 2
    values to describe their velocity; these are ~heading~ and
    ~speed~. The ~heading~ value is relative to true-north as defined
    by the ~reference-frame~ for the astronomical body. The ~speed~
    value is in fractional meters per second. For some applications
    that demand high accuracy, and where the data is infrequently
    updated this value can track very slow movement such as
    continental drift.

** Tree

   The following is the YANG tree diagram [[RFC8340]] for the
   geo-location grouping.

#+NAME: Geo location YANG tree diagram.
#+begin_src bash  :var file=geo-location-module :results output verbatim replace :wrap example :exports results
pyang --tree-print-groupings -f tree ${file} | sed -e '/^$/d;/grouping geo/d;s/^/  /'
#+end_src

#+CAPTION: Geo Location YANG tree diagram.
#+RESULTS: Geo location YANG tree diagram.
#+begin_example
  module: geo-location
      +-- geo-location
         +-- reference-frame
         |  +-- alternate-system?    string {alternate-systems}?
         |  +-- astronomical-body?   string
         |  +-- geodetic-system
         |     +-- geodetic-datum?    string
         |     +-- coord-accuracy?    decimal64
         |     +-- height-accuracy?   decimal64
         +-- (location)
         |  +--:(ellipsoid)
         |  |  +-- latitude     degrees
         |  |  +-- longitude    degrees
         |  |  +-- height?      decimal64
         |  +--:(cartesian)
         |     +-- x            decimal64
         |     +-- y            decimal64
         |     +-- z?           decimal64
         +-- velocity
         |  +-- heading?   degrees
         |  +-- speed?     decimal64
         +-- timestamp?         types:date-and-time
#+end_example


* YANG Module

#+name: geo-location-module
#+header: :cmdline "-fyang --yang-canonical"
#+header: :file geo-location.yang :results output code silent
#+begin_src yang :exports code
    // -*- fill-column: 69 -*-
    module geo-location {
      namespace "urn:ietf:geo-location";
      prefix geo;
      import ietf-yang-types { prefix types; }

      organization
        "IETF NETMOD Working Group (NETMOD)";
      contact
        "Christian Hopps <chopps@chopps.org>";

      // RFC Ed.: replace XXXX with actual RFC number and
      // remove this note.

      description
        "This module defines a grouping of a container object for
         specifying a location on or around an astronomical object (e.g.,
         The Earth).

         Copyright (c) 2018 IETF Trust and the persons identified as
         authors of the code. All rights reserved.

         Redistribution and use in source and binary forms, with or
         without modification, is permitted pursuant to, and subject to
         the license terms contained in, the Simplified BSD License set
         forth in Section 4.c of the IETF Trust's Legal Provisions
         Relating to IETF Documents
         (https://trustee.ietf.org/license-info).

         The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
         NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
         'MAY', and 'OPTIONAL' in this document are to be interpreted as
         described in BCP 14 [RFC2119] [RFC8174] when, and only when,
         they appear in all capitals, as shown here.

         This version of this YANG module is part of RFC XXXX
         (https://tools.ietf.org/html/rfcXXXX); see the RFC itself for
         full legal notices.";

      // RFC Ed.: replace XXXX with actual RFC number and
      // remove this note.

      revision 2019-02-17 {
        description "Initial Revision";
        reference "RFC XXXX: YANG Geo Location";
      }

      typedef degrees {
        type decimal64 {
          fraction-digits 16;
        }
        units "decimal degrees";
        description "Coordinate value.";
      }

      feature alternate-systems {
        description
          "This feature means the device supports specifying locations
           using alternate systems for reference frames.";
      }

      grouping geo-location {
       description
          "Grouping to identify a location on an astronomical object.";

        container geo-location {
          description
            "A location on an astronomical body (e.g., The Earth)
             somewhere in a universe.";

          container reference-frame {
            description
              "The Frame of Reference for the location values.";

            leaf alternate-system {
              if-feature alternate-systems;
              type string;
              description
                "The system in which the astronomical body and
                 geodetic-datum is defined. Normally, this value is not
                 present and the system is the natural universe; however,
                 when present this value allows for specifying alternate
                 systems (e.g., virtual realities). An alternate-system
                 modifies the definition (but not the type) of the other
                 values in the reference frame.";
            }
            leaf astronomical-body {
              type string {
                pattern
                  '[-0-9a-z #x22#x23#x5B#x5D' +
                    '!$%&()*+,\./:;<=>?@\\^_`{|}~]+';
              }
              default "earth";
              description
                "An astronomical body as named by the International
                 Astronomical Union (IAU) or according to the alternate
                 system if specified. Examples include 'sun' (our star),
                 'earth' (our planet), 'moon' (our moon), 'enceladus' (a
                 moon of Saturn), 'ceres' (an asteroid),
                 '67p/churyumov-gerasimenko (a comet). The value should
                 be comprised of all lower case ASCII characters not
                 including control characters (i.e., values 32..64, and
                 91..126)";
            }
            container geodetic-system {
              description
                "The geodetic system of the location data.";
              leaf geodetic-datum {
                type string {
                  pattern
                    '[-0-9a-z#x22#x23#x5B#x5D' +
                      '!$%&()*+,\./:;<=>?@\\^_`{|}~]+';
                }
                default "wgs-84";
                description
                  "A geodetic-datum defining the meaning of latitude,
                   longitude and height. The default is 'wgs-84' which is
                   used by the Global Positioning System (GPS)";
              }
              leaf coord-accuracy {
                type decimal64 {
                  fraction-digits 6;
                }
                description
                  "The accuracy of the latitude longitude pair. When
                   coord-accuracy is specified it overrides the
                   geodetic-datum implied accuracy. If Cartesian
                   coordinates are in use this accuracy corresponds to
                   the X and Y components";
              }
              leaf height-accuracy {
                type decimal64 {
                  fraction-digits 6;
                }
                units "meters";
                description
                  "The accuracy of height value. When specified it
                   overrides the geodetic-datum implied default. If
                   Cartesian coordinates ar in use this accuracy
                   corresponds to the Z component.";
              }
            }
          }
          choice location {
            mandatory true;
            description
              "The location data either in lat/long or Cartesian values";
            case ellipsoid {
              leaf latitude {
                type degrees;
                mandatory true;
                description
                  "The latitude value on the astronomical body. The
                   definition and precision of this measurement is
                   indicated by the reference-frame value.";
              }
              leaf longitude {
                type degrees;
                mandatory true;
                description
                  "The longitude value on the astronomical body. The
                   definition and precision of this measurement is
                   indicated by the reference-frame.";
              }
              leaf height {
                type decimal64 {
                  fraction-digits 6;
                }
                units "meters";
                description
                  "Height from a reference 0 value. The precision and '0'
                   value is defined by the reference-frame.";
              }
            }
            case cartesian {
              leaf x {
                type decimal64 {
                  fraction-digits 6;
                }
                mandatory true;
                description
                  "The X value as defined by the reference-frame.";
              }
              leaf y {
                type decimal64 {
                  fraction-digits 6;
                }
                mandatory true;
                description
                  "The Y value as defined by the reference-frame.";
              }
              leaf z {
                type decimal64 {
                  fraction-digits 6;
                }
                units "meters";
                description
                  "The Z value as defined by the reference-frame.";
              }
            }
          }
          container velocity {
            description
              "If the object is in motion the velocity describes this
               motion at the the time given by the timestamp.";

            leaf heading {
                type degrees;
                description
                    "If the object is in motion then the heading will
                    indicate the direction in which the object is
                    currently moving. It is specified in fractions of
                    degrees from true north of the astronomical object";
            }
            leaf speed {
              type decimal64 {
                fraction-digits 12;
              }
              units "meters per second";
              description
                "If the object is in motion then the speed will
                 indicate the rate at which the object is currently
                 traveling along it's heading.";
            }
          }
          leaf timestamp {
            type types:date-and-time;
            description "Reference time when location was recorded.";
          }
        }
      }
    }
#+end_src

* ISO 6709:2008 Conformance

[[ISO.6709.2008]] provides an appendix with a set of tests for
conformance to the standard. The tests and results are given in the
following table along with an explanation of non-applicable tests.

#+CAPTION: Conformance Test Results
| Test    | Description                              | Pass Explanation        |
|---------+------------------------------------------+-------------------------|
| A.1.2.1 | elements reqd. for a geo. point location | CRS is always indicated |
| A.1.2.2 | Description of a CRS from a register     | CRS register is defined |
| A.1.2.3 | definition of CRS                        | N/A - Don't define CRS  |
| A.1.2.4 | representation of horizontal position    | lat/long values conform |
| A.1.2.5 | representation of vertical position      | height value conforms   |
| A.1.2.6 | text string representation               | N/A - No string format  |

For test =A.1.2.1= the YANG geo location object either includes a CRS
(~reference-frame~) or has a default defined ([[WGS84]]).

For =A.1.2.3= we do not define our own CRS, and doing so is not
required for conformance.

For =A.1.2.6= we do not define a text string representation, which is
also not required for conformance.

* Usability

The geo-location object defined in this document and YANG module have
been designed to be usable in a very broad set of applications.
This includes the ability to locate things on astronomical bodies
other than The Earth, and to utilize entirely different coordinate
systems and realities.

Many systems make use of geo-location data, and so it's important to
be able describe this data using this geo-location object defined in
this document.

** Portability

#   DOI: https://doi.org/10.1007/978-0-387-35973-1_904
#   Percivall G. (2008) OGC's Open Standards for Geospatial
#   Interoperability. In: Shekhar S., Xiong H. (eds) Encyclopedia of
#   GIS. Springer, Boston, MA

In order to verify portability while developing this module the
following standards and standard APIs and were considered.

*** IETF URI Value

[[RFC5870]] defines a standard URI value for geographic location data. It
includes the ability to specify the ~geodetic-value~ (it calls this
~crs~) with the default being =wgs-84= [[WGS84]]. For the location data
it allows 2 to 3 coordinates defined by the ~crs~ value. For accuracy
it has a single ~u~ parameter for specifying uncertainty. The ~u~
value is in fractions of meters and applies to all the location
values. As the URI is a string, all values are specifies as strings
and so are capable of as much precision as required.

URI values can be mapped to and from the YANG grouping, with the
caveat that some loss of precision (in the extremes) may occur due to
the YANG grouping using decimal64 values rather than strings.

*** W3C

See https://w3c.github.io/geolocation-api/#dom-geolocationposition.

W3C Defines a geo-location API in [[W3CGEO]]. We show a snippet of
code below which defines the geo-location data for this API. This is
used by many application (e.g., Google Maps API).

#+CAPTION: Snippet Showing Geo-Location Definition
#+begin_src javascript
  interface GeolocationPosition {
    readonly attribute GeolocationCoordinates coords;
    readonly attribute DOMTimeStamp timestamp;
  };

  interface GeolocationCoordinates {
    readonly attribute double latitude;
    readonly attribute double longitude;
    readonly attribute double? altitude;
    readonly attribute double accuracy;
    readonly attribute double? altitudeAccuracy;

    readonly attribute double? speed;
  };
#+end_src

**** Compare with YANG Model

| Field            | Type         | YANG            | Type        |
|------------------+--------------+-----------------+-------------|
| accuracy         | double       | coord-accuracy  | dec64 fr 6  |
| altitude         | double       | height          | dec64 fr 6  |
| altitudeAccuracy | double       | height-accuracy | dec64 fr 6  |
| heading          | double       | heading         | dec64 fr 16 |
| latitude         | double       | latitude        | dec64 fr 16 |
| longitude        | double       | longitude       | dec64 fr 16 |
| speed            | double       | speed           | dec64 fr 12 |
| timestamp        | DOMTimeStamp | timestamp       | string      |

- accuracy (double) :: Accuracy of ~latitude~ and ~longitude~ values
     in meters.
- altitude (double) :: Optional height in meters above the [[WGS84]] ellipsoid.
- altitudeAccuracy (double) :: Optional accuracy of ~altitude~ value
     in meters.
- heading (double) :: Optional Direction in decimal deg from true
     north increasing clock-wise.
- latitude, longitude (double) :: Standard lat/long values in decimal degrees.
- speed (double) :: Speed along heading in meters per second.
- timestamp (DOMTimeStamp) :: Specifies milliseconds since the Unix
     EPOCH in 64 bit unsigned integer. The YANG model defines the
     timestamp with arbitrarily large precision by using a string
     which encompasses all representable values of this timestamp
     value.

W3C API values can be mapped to the YANG grouping, with the caveat
that some loss of precision (in the extremes) may occur due to the
YANG grouping using decimal64 values rather than doubles.

Conversely, only YANG values for The Earth using the default
=wgs-84= [[WGS84]] as the ~geodetic-datum~, can be directly mapped to the
W3C values, as W3C does not provide the extra features necessary to
map the broader set of values supported by the YANG grouping.

*** Geography Markup Language (GML)

ISO adopted the Geography Markup Language (GML) defined by OGC 07-036
as [[ISO.19136.2007]]. GML defines, among many other things, a position
type =gml:pos= which is a sequence of ~double~ values. This sequence
of values represent coordinates in a given CRS. The CRS is either
inherited from containing elements or directly specified as
attributes ~srsName~ and optionally ~srsDimension~ on the ~gml:pos~.

GML defines an Abstract CRS type which Concrete CRS types derive
from. This allows for many types of CRS definitions. We are concerned
with the Geodetic CRS type which can have either ellipsoidal or
Cartesian coordinates. We believe that other non-Earth based CRS as
well as virtual CRS should also be representable by the GML CRS types
as well.

Thus GML ~gml:pos~ values can be mapped directly to the YANG
grouping, with the caveat that some loss of precision (in the
extremes) may occur due to the YANG grouping using decimal64 values
rather than doubles.

Conversely, YANG grouping values can be mapped to GML as directly as
the GML CRS available definitions allow with a minimum of Earth-based
geodetic systems fully supported.

GML also defines an observation value in ~gml:Observation~ which
includes a timestamp value ~gml:validTime~ in addition to other
components such as ~gml:using~ ~gml:target~ and ~gml:resultOf~. Only
the timestamp is mappable to and from the YANG grouping. Furthermore
~gml:validTime~ can either be an Instantaneous measure
(~gml:TimeInstant~) or a time period (~gml:TimePeriod~). Only the
instantaneous ~gml:TimeInstant~ is mappable to and from the YANG
grouping.

*** KML

KML 2.2 [[KML22]] (formerly Keyhole Markup Language) was submitted by
Google to Open Geospatial Consortium (OGC)
[[https://www.opengeospatial.org/]] and was adopted. The latest version
as of this writing is KML 2.3 [[KML23]]. This schema includes geographic
location data in some of it's objects (e.g., <kml:Point or
<kml:Camera> objects). This data is provided in string format and
corresponds to the [[W3CGEO]] values. The timestamp value is also
specified as a string as in our YANG grouping.

KML has some special handling for the height value useful for
visualization software, ~kml:altitudeMode~. These values for
~kml:altitudeMode~ include indicating the height is ignored
(~clampToGround~), in relation to the locations ground level
(~relativeToGround~), or in relation to the geodetic datum
(~absolute~). The YANG grouping can directly map the ignored and
absolute cases, but not the relative to ground case.

In addition to the ~kml:altitudeMode~ KML also defines two seafloor
height values using ~kml:seaFloorAltitudeMode~. One value is to
ignore the height value (~clampToSeaFloor~) and the other is relative
(~relativeToSeaFloor~). As with the ~kml:altitudeMode~ value, the
YANG grouping supports the ignore case but not the relative case.

The KML location values use a geodetic datum defined in Annex A by
the GML Coordinate Reference System (CRS) [[ISO.19136.2007]] with
identifier ~LonLat84_5773~. The altitude value for KML absolute
height mode is measured from the vertical datum specified by [[WGS84]].

Thus the YANG grouping and KML values can be directly mapped in both
directions (when using a supported altitude mode) with the caveat
that some loss of precision (in the extremes) may occur due to the
YANG grouping using decimal64 values rather than strings. For the
relative height cases the application doing the transformation is
expected to have the data available to transform the relative height
into an absolute height which can then be expressed using the YANG
grouping.

* IANA Considerations
** Geodetic System Value Registry

This registry allocates names for standard geodetic systems. Often
these values are referred to using multiple names (e.g., full names
or multiple acronyms values). The intent of this registry is to
provide a single standard value for any given geodetic system.

The values SHOULD use an acronym when available, they MUST be
converted to lower case, and spaces MUST be changed to dashes "-".

Each entry should be sufficient to define the 3 coordinate values (2
if height is not required). So for example the =wgs-84= is defined as
WGS-84 with the geoid updated by at least [[EGM96]] for height values.
Specific entries for [[EGM96]] and [[EGM08]] are present if a more precise
definition of the data is required.

It should be noted that [[RFC5870]] also creates a registry for Geodetic
Systems (it calls CRS); however, this registry has a very strict
modification policy. The authors of [[RFC5870]] have the stated goal of
making CRS registration hard to avoid proliferation of CRS values. As
our module defines alternate systems and has a broader (beyond earth)
scope, the registry defined below is meant to be more easily modified.

TODO: Open question, should we create a new registry here or attempt
to modify the one created by [[RFC5870]]. It's worth noting that we
include the ability to specify any geodetic system including ones
designed for astronomical bodies other than the earth, as well as
ones based on alternate systems. These requirements may be too broad
for adapting the existing [[RFC5870]] registry.

TODO: Open question, is FCFS *too* easy, perhaps expert review would
strike a good balance. If expert review is acceptable, would it also
be acceptable to update the policy on [[RFC5870]] and use it instead?

The allocation policy for this registry is First Come First Served,
[[RFC8126]] as the intent is simply to avoid duplicate values.

The initial values for this registry are as follows.

# XXX check out: ISO TS 19127

   #+name: Initial Geodetic-Datum Values
   | Name       | Description                                        |
   |------------+----------------------------------------------------|
   | me         | Mean Earth/Polar Axis (Moon)                       |
   | mola-vik-1 | MOLA Height, IAU Viking-1 PM (Mars)                |
   | wgs-84-96  | World Geodetic System 1984 [[WGS84]] w/ EGM96          |
   | wgs-84-08  | World Geodetic System 1984 [[WGS84]] w/ [[EGM08]]          |
   | wgs-84     | World Geodetic System 1984 [[WGS84]] (EGM96 or better) |

* Security Considerations

   This document defines a common geo location grouping using the
   YANG data modeling language. The grouping itself has no security
   or privacy impact on the Internet, but the usage of the grouping
   in concrete YANG modules might have. The security considerations
   spelled out in the YANG 1.1 specification [[RFC7950]] apply for this
   document as well.

* References
** Normative References
*** EGM08
    :PROPERTIES:
    :REF_TITLE: An Earth Gravitational Model to Degree 2160: EGM08.
    :REF_AUTHOR: ("N. K. Pavlis" "S. A. Holmes" "S. C. Kenyon" "J. K. Factor")
    :REF_DATE: 2008
    :REF_CONTENT: Presented at the 2008 General Assembly of the European Geosciences Union, Vienna, Arpil13-18, 2008
    :REF_TARGET: http://earth-info.nga.mil/GandG/wgs84/gravitymod/egm2008/egm08_wgs84.html
    :END:
*** EGM96
    :PROPERTIES:
    :REF_TITLE: The Development of the Joint NASA GSFC and the National Imagery and Mapping Agency (NIMA) Geopotential Model EGM96.
    :REF_AUTHOR: ("F. G. Lemoine" "S. C. Kenyon" "J. K. Factor" "R. G. Trimmer" "N. K. Pavlis" "D. S. Chinn" "C. M. Cox" "S. M. Klosko" "S. B. Luthcke" "M. H. Torrence" "Y. M. Wang" "R. G. Williamson" "E. C. Pavlis" "R. H. Rapp" "T. R. Olson")
    :REF_CONTENT: Technical Report NASA/TP-1998-206861, NASA, Greenbelt.
    :REF_DATE: 1998
    :REF_TARGET: https://cddis.nasa.gov/926/egm96/egm96.html
    :END:
*** ISO.6709.2008
    :PROPERTIES:
    :REF_ORG: International Organization for Standardization
    :REF_TITLE: ISO 6709:2008 Standard representation of geographic point location by coordinates.
    :REF_DATE: 2008
    :END:
*** RFC2119
*** RFC8174
*** RFC8126
*** RFC8342
*** WGS84
    :PROPERTIES:
    :REF_ORG: National Imagery and Mapping Agency.
    :REF_TITLE: National Imagery and Mapping Agency Technical Report 8350.2, Third Edition.
    :REF_DATE: 2000-01-03
    :REF_TARGET: http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf
    :END:

** Informative References
*** ISO.19136.2007
    :PROPERTIES:
    :REF_ORG: International Organization for Standardization
    :REF_TITLE: ISO 19136:2007 Geographic information -- Geography Markup Language (GML)
    :REX_DATE: 2007
    :END:
*** KML22
    :PROPERTIES:
    :REF_EDITOR: Tim Wilson
    :REF_ORG: Open Geospatial Consortium
    :REF_TITLE: OGC KML (Version 2.2)
    :REF_DATE: 2008-04-14
    :REF_TARGET: http://portal.opengeospatial.org/files/?artifact_id=27810
    :END:
*** KML23
    :PROPERTIES:
    :REF_EDITOR: David Burggraf
    :REF_ORG: Open Geospatial Consortium
    :REF_TITLE: OGC KML 2.3
    :REF_DATE: 2015-08-04
    :REF_TARGET: http://docs.opengeospatial.org/is/12-007r2/12-007r2.html
    :END:
*** RFC5870
*** RFC7950
*** RFC8340
*** W3CGEO
    :PROPERTIES:
    :REF_AUTHOR: Andrei Popescu
    :REF_TITLE: Geolocation API Specification
    :REF_DATE: 2016-11-08
    :REF_TARGET: https://www.w3.org/TR/2016/REC-geolocation-API-20161108/
    :END:
* Examples

Below is a fictitious module that uses the geo-location grouping.

# We assign the output of geo-location-module block to a variable get
# it to execute to create the file.

#+CAPTION: Example YANG module using geo location.
#+name: uses-geo-location
#+header: :file uses-geo-location.yang
#+begin_src yang :results output code silent :exports code
  module uses-geo-location {
    namespace "urn:ietf:uses-geo-location";
    prefix ugeo;
    import geo-location { prefix geo; }
    organization "Empty Org";
    contact "Example Author <eauthor@example.com>";
    description "Example use of geo-location";
    revision 2019-02-02 { reference "None"; }
    container locatable-items {
      description "container of locatable items";
      list locatable-item {
        key name;
        description "A of locatable item";
        leaf name {
          type string;
          description "name of locatable item";
        }
        uses geo:geo-location;
      }
    }
  }
#+end_src

Below is a the YANG tree for the fictitious module that uses the
geo-location grouping.

#+NAME: Example YANG tree diagram of geo location use.
#+begin_src bash  :var file=uses-geo-location :results output verbatim replace :wrap example :exports results
pyang --tree-print-groupings -f tree ${file}
# pyang --tree-print-groupings -f tree ${file} | sed -e '/^$/d;s/^/  /'
#+end_src

#+CAPTION:
#+RESULTS: Example YANG tree diagram of geo location use.
#+begin_example
module: uses-geo-location
  +--rw locatable-items
     +--rw locatable-item* [name]
        +--rw name            string
        +--rw geo-location
           +--rw reference-frame
           |  +--rw alternate-system?    string {alternate-systems}?
           |  +--rw astronomical-body?   string
           |  +--rw geodetic-system
           |     +--rw geodetic-datum?    string
           |     +--rw coord-accuracy?    decimal64
           |     +--rw height-accuracy?   decimal64
           +--rw (location)
           |  +--:(ellipsoid)
           |  |  +--rw latitude     degrees
           |  |  +--rw longitude    degrees
           |  |  +--rw height?      decimal64
           |  +--:(cartesian)
           |     +--rw x            decimal64
           |     +--rw y            decimal64
           |     +--rw z?           decimal64
           +--rw velocity
           |  +--rw heading?   degrees
           |  +--rw speed?     decimal64
           +--rw timestamp?         types:date-and-time
#+end_example

Below is some example YANG XML data for the fictitious module that
uses the geo-location grouping.

#+NAME: validate-xml-example
#+HEADER: :var vfile=xml-example :var module=uses-geo-location
#+begin_src bash :results output verbatim replace :wrap example :exports none
  mkdir -p .validate
  # if ! yang2dsdl -t config -d .validate -v ${vfile} $module 2>&1 >/dev/null; then echo FAIL; fi
  if ! yang2dsdl -t config -d .validate -v ${vfile} $module 2>&1 >/dev/null; then echo FAIL; fi
#+end_src

#+RESULTS: validate-xml-example
#+begin_example
test-xml-example.xml validates
No errors found.
#+end_example

#+CAPTION: Example XML data of geo location use.
#+NAME: xml-example
#+begin_src xml :file test-xml-example.xml :results output code silent :exports code
  <ns0:config xmlns:ns0="urn:ietf:params:xml:ns:netconf:base:1.0">
    <locatable-items xmlns="urn:ietf:uses-geo-location">
      <locatable-item>
        <name>Gaetana's</name>
        <geo-location>
          <latitude>40.73297</latitude>
          <longitude>-74.007696</longitude>
        </geo-location>
      </locatable-item>
      <locatable-item>
        <name>Pont des Arts</name>
        <geo-location>
          <timestamp>2012-03-31T16:00:00Z</timestamp>
          <latitude>48.8583424</latitude>
          <longitude>2.3375084</longitude>
          <height>35</height>
        </geo-location>
      </locatable-item>
      <locatable-item>
        <name>Saint Louis Cathedral</name>
        <geo-location>
          <timestamp>2013-10-12T15:00:00-06:00</timestamp>
          <latitude>29.9579735</latitude>
          <longitude>-90.0637281</longitude>
        </geo-location>
      </locatable-item>
      <locatable-item>
        <name>Apollo 11 Landing Site</name>
        <geo-location>
          <timestamp>1969-07-21T02:56:15Z</timestamp>
          <reference-frame>
            <astronomical-body>moon</astronomical-body>
            <geodetic-system>
              <geodetic-datum>me</geodetic-datum>
            </geodetic-system>
          </reference-frame>
          <latitude>0.67409</latitude>
          <longitude>23.47298</longitude>
        </geo-location>
      </locatable-item>
    </locatable-items>
  </ns0:config>
#+end_src

#+NAME: Sample XML Skeleton
#+begin_src bash  :var file=uses-geo-location :results output verbatim replace :wrap comment :exports none
pyang -f sample-xml-skeleton ${file}
#+end_src

#+RESULTS: Sample XML Skeleton
#+begin_comment
<?xml version='1.0' encoding='UTF-8'?>
<data xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <locatable-items xmlns="urn:ietf:uses-geo-location">
    <locatable-item>
      <name/>
      <geo-location>
        <reference-frame>
          <alternate-system/>
          <geodetic-system>
            <coord-accuracy/>
            <height-accuracy/>
          </geodetic-system>
        </reference-frame>
        <latitude/>
        <longitude/>
        <height/>
        <x/>
        <y/>
        <z/>
        <velocity>
          <heading/>
          <speed/>
        </velocity>
        <timestamp/>
      </geo-location>
    </locatable-item>
  </locatable-items>
</data>
#+end_comment

* Acknowledgements

We would like to thank Peter Lothberg for the motivation as well as
help in defining a more broadly useful geographic location object.

We would also like to thank Acee Lindem and Qin Wu for their work on
a geographic location object that led to this documents creation.

